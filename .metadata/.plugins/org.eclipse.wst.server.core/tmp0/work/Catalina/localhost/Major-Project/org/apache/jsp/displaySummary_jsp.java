/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2025-03-04 05:57:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class displaySummary_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Summary</title>\r\n");
      out.write("    <!-- Font Awesome for icons -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            background: linear-gradient(#ccc, #fff);\r\n");
      out.write("            font: 18px sans-serif;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .letter {\r\n");
      out.write("            background: #fff;\r\n");
      out.write("            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n");
      out.write("            margin: 26px auto 0;\r\n");
      out.write("            max-width: 1000px;\r\n");
      out.write("            min-height: 300px;\r\n");
      out.write("            padding: 24px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("            width: 95%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .letter:before, .letter:after {\r\n");
      out.write("            content: \"\";\r\n");
      out.write("            height: 98%;\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            z-index: -1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .letter:before {\r\n");
      out.write("            background: #fafafa;\r\n");
      out.write("            box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\r\n");
      out.write("            left: -5px;\r\n");
      out.write("            top: 4px;\r\n");
      out.write("            transform: rotate(-2.5deg);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .letter:after {\r\n");
      out.write("            background: #f6f6f6;\r\n");
      out.write("            box-shadow: 0 0 3px rgba(0, 0, 0, 0.2);\r\n");
      out.write("            right: -3px;\r\n");
      out.write("            top: 1px;\r\n");
      out.write("            transform: rotate(1.4deg);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .letter p {\r\n");
      out.write("            line-height: 1.8;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #hamburger {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 20px;\r\n");
      out.write("            left: 20px;\r\n");
      out.write("            font-size: 30px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sidebar {\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            width: 0;\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            left: 0;\r\n");
      out.write("            background-color: #111;\r\n");
      out.write("            overflow-x: hidden;\r\n");
      out.write("            transition: 0.5s;\r\n");
      out.write("            padding-top: 60px;\r\n");
      out.write("            z-index: 1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sidebar a {\r\n");
      out.write("            padding: 8px 8px 8px 32px;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-size: 18px; /* Decreased font size */\r\n");
      out.write("            color: #818181;\r\n");
      out.write("            display: block;\r\n");
      out.write("            transition: 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sidebar a:hover {\r\n");
      out.write("            color: #f1f1f1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sidebar .closebtn {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            right: 25px;\r\n");
      out.write("            font-size: 36px;\r\n");
      out.write("            margin-left: 50px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar {\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            width: 0;\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            right: 0;\r\n");
      out.write("            background-color: #111;\r\n");
      out.write("            overflow-x: hidden;\r\n");
      out.write("            transition: 0.5s;\r\n");
      out.write("            padding-top: 60px;\r\n");
      out.write("            z-index: 1;\r\n");
      out.write("            color: white;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar h2 {\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar .closebtn {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            left: 85px;\r\n");
      out.write("            font-size: 36px;\r\n");
      out.write("            margin-left: 50px;\r\n");
      out.write("            color: #818181;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar textarea {\r\n");
      out.write("            width: 80%;\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            resize: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar button {\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            background-color: #28a745;\r\n");
      out.write("            color: white;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .right-sidebar button:hover {\r\n");
      out.write("            background-color: #218838;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .dark-mode {\r\n");
      out.write("            background: linear-gradient(#333, #111);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .dark-mode .letter {\r\n");
      out.write("            background: #222;\r\n");
      out.write("            color: #ddd;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"hamburger\" onclick=\"openNav()\"><i class=\"fas fa-bars\"></i></div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"mySidebar\" class=\"sidebar\">\r\n");
      out.write("        <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\">&times;</a>\r\n");
      out.write("        <a href=\"landing.html\"><i class=\"fas fa-home\"></i> Return Home</a><br>\r\n");
      out.write("        <a href=\"#\" onclick=\"openRightSidebar()\"><i class=\"fas fa-edit\"></i> Write Note</a><br>\r\n");
      out.write("        <a href=\"#\" onclick=\"downloadSummary()\"><i class=\"fas fa-download\"></i> Download Summary</a><br>\r\n");
      out.write("        <a href=\"#\" onclick=\"printSummary()\"><i class=\"fas fa-print\"></i> Print Summary</a><br>\r\n");
      out.write("        <a href=\"#\" onclick=\"copyToClipboard()\"><i class=\"fas fa-copy\"></i> Copy to Clipboard</a><br>\r\n");
      out.write("        <a href=\"javascript:void(0)\" onclick=\"toggleDarkMode()\"><i class=\"fas fa-moon\"></i> Dark Mode</a><br>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"rightSidebar\" class=\"right-sidebar\">\r\n");
      out.write("        <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeRightSidebar()\">&times;</a>\r\n");
      out.write("        <h2>Write Note</h2>\r\n");
      out.write("        <textarea id=\"noteTextarea\" rows=\"10\" placeholder=\"Write your note here...\"></textarea>\r\n");
      out.write("        <div style=\"display: flex; gap: 10px;\">\r\n");
      out.write("            <button onclick=\"saveNote()\">Save</button>\r\n");
      out.write("            <button onclick=\"clearNote()\">Clear</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("     <div class=\"letter\">\r\n");
      out.write("    <h1>Summary of ");
      out.print( session.getAttribute("filename") );
      out.write(":</h1>\r\n");
      out.write("    <div id=\"summary\">\r\n");
      out.write("        ");

            String summary = (String) session.getAttribute("summary");

            if (summary != null) {
                // Replace ##...## with <h1> and **...** with <h2>
                summary = summary.replaceAll("##(.*?)##", "<h1>$1</h1>");
                summary = summary.replaceAll("\\*\\*(.*?)\\*\\*", "<h2>$1</h2>");
                summary =summary.replaceAll("##","");
                
                // Split the summary into sentences for formatting purposes
                String[] sentences = summary.split("\\.\\s*");
                int sentenceCount = 0;
                int paragraphSentenceCount = 5 + (int)(Math.random() * ((10 - 5) + 1)); // Random number between 5 and 10

                // Group sentences into paragraphs based on random sentence count
                StringBuilder paragraph = new StringBuilder();
                for (String sentence : sentences) {
                    paragraph.append(sentence.trim()).append(". ");
                    sentenceCount++;
                    if (sentenceCount >= paragraphSentenceCount) {
                        out.print("<p style='text-indent: 1em;'>" + paragraph.toString().trim() + "</p>");
                        paragraph.setLength(0); // Reset paragraph
                        sentenceCount = 0;
                        paragraphSentenceCount = 5 + (int)(Math.random() * ((10 - 5) + 1)); // Generate new random number for next paragraph
                    }
                }

                // Print the remaining sentences if any
                if (paragraph.length() > 0) {
                    out.print("<p style='text-indent: 1em;'>" + paragraph.toString().trim() + "</p>");
                }
            } else {
                out.print("No summary generated.");
            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("    <script>\r\n");
      out.write("        function openNav() {\r\n");
      out.write("            document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function closeNav() {\r\n");
      out.write("            document.getElementById(\"mySidebar\").style.width = \"0\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function openRightSidebar() {\r\n");
      out.write("            closeNav(); // Close the hamburger menu\r\n");
      out.write("            document.getElementById(\"rightSidebar\").style.width = \"300px\"; // Increase width for better UI\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function closeRightSidebar() {\r\n");
      out.write("            document.getElementById(\"rightSidebar\").style.width = \"0\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function downloadSummary() {\r\n");
      out.write("            const summary = document.getElementById('summary').innerText;\r\n");
      out.write("            const blob = new Blob([summary], { type: 'text/plain' });\r\n");
      out.write("            const url = URL.createObjectURL(blob);\r\n");
      out.write("            const a = document.createElement('a');\r\n");
      out.write("            a.href = url;\r\n");
      out.write("            a.download = 'summary.txt';\r\n");
      out.write("            a.click();\r\n");
      out.write("            URL.revokeObjectURL(url);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function printSummary() {\r\n");
      out.write("            const summaryContent = document.getElementById('summary').innerHTML;\r\n");
      out.write("            const newWindow = window.open('', '', 'width=800, height=600');\r\n");
      out.write("            newWindow.document.write('<html><head><title>Print Summary</title></head><body>');\r\n");
      out.write("            newWindow.document.write(summaryContent);\r\n");
      out.write("            newWindow.document.write('</body></html>');\r\n");
      out.write("            newWindow.print();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function copyToClipboard() {\r\n");
      out.write("            const summary = document.getElementById('summary').innerText;\r\n");
      out.write("            navigator.clipboard.writeText(summary).then(() => {\r\n");
      out.write("                alert('Summary copied to clipboard!');\r\n");
      out.write("            }).catch(err => {\r\n");
      out.write("                console.error('Could not copy text: ', err);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function toggleDarkMode() {\r\n");
      out.write("            document.body.classList.toggle('dark-mode');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function saveNote() {\r\n");
      out.write("            const note = document.getElementById('noteTextarea').value;\r\n");
      out.write("            if (note) {\r\n");
      out.write("                // Sending the note to the server using AJAX\r\n");
      out.write("                const xhr = new XMLHttpRequest();\r\n");
      out.write("                xhr.open('POST', 'saveNote.jsp', true);\r\n");
      out.write("                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n");
      out.write("                xhr.onreadystatechange = function () {\r\n");
      out.write("                    if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                        closeRightSidebar();\r\n");
      out.write("                    }\r\n");
      out.write("                };\r\n");
      out.write("                xhr.send('note=' + encodeURIComponent(note));\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        function clearNote() {\r\n");
      out.write("            document.getElementById('noteTextarea').value = '';\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
