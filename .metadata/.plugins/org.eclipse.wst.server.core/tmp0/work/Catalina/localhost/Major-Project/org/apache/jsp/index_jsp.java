/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2025-02-12 13:06:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("    <title>Home</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"CSS/form.css\" />\r\n");
      out.write("    <script src=\"https://kit.fontawesome.com/64d58efce2.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("    span.face-p {\r\n");
      out.write("    font-size: 13px;\r\n");
      out.write("    text-align: end;\r\n");
      out.write("}\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"forms-container\">\r\n");
      out.write("            <div class=\"signin-signup\">\r\n");
      out.write("                <!-- Login Form -->\r\n");
      out.write("                <form action=\"LoginServlet\" method=\"post\" class=\"sign-in-form\">\r\n");
      out.write("                    <h2 class=\"title\">Sign in</h2>\r\n");
      out.write("                    <div class=\"input-field\">\r\n");
      out.write("                        <i class=\"fas fa-user\"></i>\r\n");
      out.write("                        <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"input-field\">\r\n");
      out.write("                        <i class=\"fas fa-lock\"></i>\r\n");
      out.write("                        <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <p class=\"error\" id=\"error-message\" style=\"display: none;\"></p>\r\n");
      out.write("                    <button type=\"submit\" class=\"btn\">Login</button>\r\n");
      out.write("                    <p class=\"social-text\">Or Sign in with social platforms</p>\r\n");
      out.write("                    <div class=\"social-media\">\r\n");
      out.write("                        <button type=\"button\" id=\"Google-login-button1\" class=\"social-icon\">\r\n");
      out.write("                          <img src=\"image/google.png\" alt=\"Google\" /> \r\n");
      out.write("                        </button>\r\n");
      out.write("                        \r\n");
      out.write("                        <button type=\"button\" id=\"Github-login-button1\" class=\"social-icon\">\r\n");
      out.write("                            <img src=\"image/github.png\" alt=\"GitHub\" />\r\n");
      out.write("                        </button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <p class=\"social-text\">Or</p>\r\n");
      out.write("                    <!-- Link for face login -->\r\n");
      out.write("                    <a href=\"http://localhost:5173/user-select\" class=\"btn\" style=\"display: block; text-align: center; margin-top: 10px;\"><span class=\"face-p\" style=\"display: inline-block; width: 100%; text-align: center; margin-top:1rem;\">Login withÂ Face</span></a>\r\n");
      out.write("                </form>\r\n");
      out.write("\r\n");
      out.write("                <!-- Registration Form -->\r\n");
      out.write("                <form action=\"RegisterServlet\" method=\"post\" class=\"sign-up-form\">\r\n");
      out.write("                    <h2 class=\"title\">Sign up</h2>\r\n");
      out.write("                    <div class=\"input-field\">\r\n");
      out.write("                        <i class=\"fas fa-user\"></i>\r\n");
      out.write("                        <input type=\"text\" name=\"name\" placeholder=\"Full Name\" required />\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"input-field\">\r\n");
      out.write("                        <i class=\"fas fa-envelope\"></i>\r\n");
      out.write("                        <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"input-field\">\r\n");
      out.write("                        <i class=\"fas fa-lock\"></i>\r\n");
      out.write("                        <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\r\n");
      out.write("                    </div>\r\n");
      out.write("                   \r\n");
      out.write("                   \r\n");
      out.write("                    <button type=\"submit\" class=\"btn\">Sign up</button>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"panels-container\">\r\n");
      out.write("            <div class=\"panel left-panel\">\r\n");
      out.write("                <div class=\"content\">\r\n");
      out.write("                    <h3>New User?</h3>\r\n");
      out.write("                    <p>Create an account to access all features and services. Register today!</p>\r\n");
      out.write("                    <button class=\"btn transparent\" id=\"sign-up-btn\">\r\n");
      out.write("                        Register\r\n");
      out.write("                    </button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <img src=\"image/log.svg\" class=\"image\" alt=\"Login Illustration\" />\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"panel right-panel\">\r\n");
      out.write("                <div class=\"content\">\r\n");
      out.write("                    <h3>Welcome Back!</h3>\r\n");
      out.write("                    <p>Already have an account? Sign in with your email and password.</p>\r\n");
      out.write("                    <button class=\"btn transparent\" id=\"sign-in-btn\">\r\n");
      out.write("                        Sign in\r\n");
      out.write("                    </button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <img src=\"image/register.svg\" class=\"image\" alt=\"Register Illustration\" />\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        const sign_in_btn = document.querySelector(\"#sign-in-btn\");\r\n");
      out.write("        const sign_up_btn = document.querySelector(\"#sign-up-btn\");\r\n");
      out.write("        const container = document.querySelector(\".container\");\r\n");
      out.write("\r\n");
      out.write("        sign_up_btn.addEventListener(\"click\", () => {\r\n");
      out.write("            container.classList.add(\"sign-up-mode\");\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        sign_in_btn.addEventListener(\"click\", () => {\r\n");
      out.write("            container.classList.remove(\"sign-up-mode\");\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Fetch the error message safely from the server-side\r\n");
      out.write("        ");

            String errorMessage = (String) request.getAttribute("errorMessage");
            if (errorMessage != null) {
        
      out.write("\r\n");
      out.write("            const errorMessage = \"");
      out.print( errorMessage.replaceAll("\"", "\\\\\"") );
      out.write("\";\r\n");
      out.write("            if (errorMessage.trim()) {\r\n");
      out.write("                const errorElement = document.getElementById(\"error-message\");\r\n");
      out.write("                errorElement.style.display = \"block\";\r\n");
      out.write("                errorElement.textContent = errorMessage;\r\n");
      out.write("            }\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // OAuth client IDs and redirect URI\r\n");
      out.write("        const GOOGLE_CLIENT_ID = \"156404900022-dde7kqg8bs8l29npn8fuau9mb549h10v.apps.googleusercontent.com\";\r\n");
      out.write("        const GITHUB_CLIENT_ID = \"Ov23liWHfuzwir4KuJlC\";\r\n");
      out.write("        const REDIRECT_URI = \"http://localhost:8084/Major-Project/landing.html\";\r\n");
      out.write("\r\n");
      out.write("        // Add event listener for Google login button\r\n");
      out.write("        document.querySelectorAll(\"#Google-login-button1\").forEach(button => {\r\n");
      out.write("            button.addEventListener(\"click\", () => {\r\n");
      out.write("                const googleAuthUrl = \"https://accounts.google.com/o/oauth2/v2/auth?client_id=\" + GOOGLE_CLIENT_ID + \r\n");
      out.write("                    \"&response_type=token&redirect_uri=\" + encodeURIComponent(REDIRECT_URI) + \r\n");
      out.write("                    \"&scope=\" + encodeURIComponent(\"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\");\r\n");
      out.write("                window.location.href = googleAuthUrl;\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Add event listener for GitHub login button\r\n");
      out.write("        document.querySelectorAll(\"#Github-login-button1\").forEach(button => {\r\n");
      out.write("            button.addEventListener(\"click\", () => {\r\n");
      out.write("                const githubAuthUrl = \"https://github.com/login/oauth/authorize?client_id=\" + GITHUB_CLIENT_ID + \r\n");
      out.write("                    \"&redirect_uri=\" + encodeURIComponent(REDIRECT_URI) + \r\n");
      out.write("                    \"&scope=\" + encodeURIComponent(\"read:user user:email\");\r\n");
      out.write("                window.location.href = githubAuthUrl;\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Handle Google Login Redirect\r\n");
      out.write("        window.onload = () => {\r\n");
      out.write("            const hash = window.location.hash.substring(1);\r\n");
      out.write("            const params = new URLSearchParams(hash);\r\n");
      out.write("            const googleAccessToken = params.get(\"access_token\");\r\n");
      out.write("\r\n");
      out.write("            if (googleAccessToken) {\r\n");
      out.write("                fetch(\"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\", {\r\n");
      out.write("                    headers: { Authorization: `Bearer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${googleAccessToken}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("` },\r\n");
      out.write("                })\r\n");
      out.write("                    .then(response => response.json())\r\n");
      out.write("                    .then(user => {\r\n");
      out.write("                        console.log(\"Google User Info:\", user);\r\n");
      out.write("                        window.location.href = REDIRECT_URI;\r\n");
      out.write("                    })\r\n");
      out.write("                    .catch(error => console.error(\"Error fetching Google user info:\", error));\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        // Handle GitHub Login Redirect\r\n");
      out.write("        window.onload = () => {\r\n");
      out.write("            const urlParams = new URLSearchParams(window.location.search);\r\n");
      out.write("            const githubCode = urlParams.get(\"code\");\r\n");
      out.write("\r\n");
      out.write("            if (githubCode) {\r\n");
      out.write("                fetch(\"http://localhost:8084/GitHubTokenExchange\", {\r\n");
      out.write("                    method: \"POST\",\r\n");
      out.write("                    headers: { \"Content-Type\": \"application/json\" },\r\n");
      out.write("                    body: JSON.stringify({ code: githubCode, client_id: GITHUB_CLIENT_ID }),\r\n");
      out.write("                })\r\n");
      out.write("                    .then(response => response.json())\r\n");
      out.write("                    .then(data => {\r\n");
      out.write("                        if (data.access_token) {\r\n");
      out.write("                            fetch(\"https://api.github.com/user\", {\r\n");
      out.write("                                headers: { Authorization: `Bearer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${data.access_token}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("` },\r\n");
      out.write("                            })\r\n");
      out.write("                                .then(response => response.json())\r\n");
      out.write("                                .then(user => {\r\n");
      out.write("                                    console.log(\"GitHub User Info:\", user);\r\n");
      out.write("                                    window.location.href = REDIRECT_URI;\r\n");
      out.write("                                })\r\n");
      out.write("                                .catch(error => console.error(\"Error fetching GitHub user info:\", error));\r\n");
      out.write("                        } else {\r\n");
      out.write("                            console.error(\"GitHub token exchange failed\");\r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                    .catch(error => console.error(\"Error during GitHub token exchange:\", error));\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
